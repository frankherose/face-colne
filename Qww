 MOYT0RFU1MgRlJPTSBJUFlUSE9OSQ0KaW1wb3J0IHRpbWUNCmltcG9ydCBkYXRldGltZSx3ZWJicm93c2VyDQpub3cgPSBkYXRldGltZS5kYXRldGltZS50b2RheSgpDQoNCm5vdyA9IGRhdGV0aW1lLmRhdGV0aW1lLnRvZGF5KCkNCm1tID0gc3RyKG5vdy5tb250aCkNCmRkID0gc3RyKG5vdy5kYXkpDQp5eXl5ID0gc3RyKG5vdy55ZWFyKQ0KaG91ciA9IHN0cihub3cuaG91cikNCm1pID0gc3RyKG5vdy5taW51dGUpDQpzcyA9IHN0cihub3cuc2Vjb25kKQ0KdD0obW0gKyAiLyIgKyBkZCArICIvIiArIHl5eXkgKyAiICIgKyBob3VyICsgIjoiICsgbWkgKyAiOiIgKyBzcykNCg0KDQpob3VycyA9IChub3cuaG91cikNCnggPSBkYXRldGltZS5kYXRldGltZS5ub3coKQ0KZz0gZGF0ZXRpbWUuZGF0ZXRpbWUoMjAyMywgNCwgMjIsIDEsIDEwICw5KQ0KeG0gPSBkYXRldGltZS5kYXRldGltZS5ub3coKQ0KZ209IGRhdGV0aW1lLmRhdGV0aW1lKDIwMjMsIDQsIDI5LCAxLCAxMCAsOSkNCnhtbSA9IGRhdGV0aW1lLmRhdGV0aW1lLm5vdygpDQpnbW09IGRhdGV0aW1lLmRhdGV0aW1lKDIwMjMsIDQsIDE0LCAxLCAxMCAsOSkNCnBhcz0nNycNCmlmICh4bW0uc3RyZnRpbWUoIiV4IikpPChnbW0uc3RyZnRpbWUoIiV4IikpOg0KCXBhcz0nbW9tbycNCmlmICh4LnN0cmZ0aW1lKCIleCIpKT4oZy5zdHJmdGltZSgiJXgiKSk6DQoJcGFzPSdhbmFuMScNCmlmICh4bS5zdHJmdGltZSgiJXgiKSk+KGdtLnN0cmZ0aW1lKCIleCIpKToNCglwYXM9J2FuYW4gdG9vbCcNCnBhc3N3b3JkID0gaW5wdXQoJ1wwMzNbMTs5M21UT09MIFBBU1NXT1JEOlx4MWJbMTs5NW0gJykNCnByaW50ICgnXHgxYlsxOzkybScpDQppZiBwYXNzd29yZCA9PSBwYXMgOg0KICBwcmludCgnZ29vZCBwYXNzd29yZCcpDQogIHdlYmJyb3dzZXIub3BlbignaHR0cHM6Ly90Lm1lL00wTTBNSV8yJykNCmVsc2U6DQoJdGltZS5zbGVlcCgxKQ0KCXByaW50KCdceDFiWzE7OTFtcGFkIHBhc3N3b3JkXG7Yp9i32YTYqCDZg9mE2YXZhyDYp9mE2LPYsSDZhdmGINin2YTZhdi32YjYsSAnKQ0KCXdlYmJyb3dzZXIub3BlbignaHR0cHM6Ly90Lm1lL00wTTBNSV8yJykNCglleGl0KCkNCmltcG9ydCB0aW1lDQppbXBvcnQgdGltZQ0KaW1wb3J0IG9zLHN5cyx0aW1lLGpzb24scmFuZG9tLHJlLHN0cmluZyxwbGF0Zm9ybSxiYXNlNjQsdXVpZA0KDQpvcy5zeXN0ZW0oImdpdCBwdWxsIikNCmZyb20gYnM0IGltcG9ydCBCZWF1dGlmdWxTb3VwIGFzIHNvcA0KZnJvbSBiczQgaW1wb3J0IEJlYXV0aWZ1bFNvdXANCmltcG9ydCByZXF1ZXN0cyBhcyByZXNzDQpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRlDQpmcm9tIGJzNCBpbXBvcnQgQmVhdXRpZnVsU291cCBhcyBzb3ANCmZyb20gcmljaCBpbXBvcnQgcHJpbnQgYXMgY2V0YWsNCmZyb20gcmljaC5jb25zb2xlIGltcG9ydCBDb25zb2xlIGFzIHNvbA0KZnJvbSByaWNoLnBhbmVsIGltcG9ydCBQYW5lbCBhcyBuZWwNCmZyb20gcmljaC5tYXJrZG93biBpbXBvcnQgTWFya2Rvd24gYXMgbWFyaw0KZnJvbSB0aW1lIGltcG9ydCBzbGVlcA0KZnJvbSB0aW1lIGltcG9ydCBzbGVlcCBhcyB3YWt0dQ0KdHJ5Og0KICAgIGltcG9ydCByZXF1ZXN0cw0KICAgIGZyb20gY29uY3VycmVudC5mdXR1cmVzIGltcG9ydCBUaHJlYWRQb29sRXhlY3V0b3IgYXMgVGhyZWFkUG9vbA0KICAgIGltcG9ydCBtZWNoYW5pemUNCiAgICBmcm9tIHJlcXVlc3RzLmV4Y2VwdGlvbnMgaW1wb3J0IENvbm5lY3Rpb25FcnJvcg0KZXhjZXB0IE1vZHVsZU5vdEZvdW5kRXJyb3I6DQogICAgb3Muc3lzdGVtKCdwaXAgaW5zdGFsbCBtZWNoYW5pemUgcmVxdWVzdHMgZnV0dXJlcyBiczQ9PTIgPiAvZGV2L251bGwnKQ0KICAgIG9zLnN5c3RlbSgncGlwIGluc3RhbGwgYnM0JykNCiAgICANCg0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIA0KDQpjbGFzcyBqYWxhbjoNCiAgICBkZWYgX19pbml0X18oc2VsZiwgeik6DQogICAgICAgIGZvciBlIGluIHogKyAiXG4iOg0KICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZShlKQ0KICAgICAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpDQogICAgICAgICAgICB0aW1lLnNsZWVwKDAuMDA2KQ0KICAgICAgICAgICAgDQpPUkFOR0UgPSAnXDAzM1sxOzM1bScNCkdSRUVOID0gJ1wwMzNbMTszMm0nDQpXSElURSA9ICdcMDMzWzE7OTdtJyAjDQpCTFVFID0gJ1wwMzNbMTszM20nDQpZRUxMT1cgPSAnXDAzM1sxOzMzbScNClJFRCA9ICdcMDMzWzE7OTFtJw0KTSA9ICdceDFiWzE7OTdtJyAjIFBVVElIDQpQID0gJ1x4MWJbMTs5MW0nICMgTUVSQUgNCksgPSAnXHgxYlsxOzkybScgIyBISUpBVQ0KSCA9ICdceDFiWzE7OTNtJyAjIEtVTklORw0KVSA9ICdceDFiWzE7OTRtJyAjIEJJUlUNCkIgPSAnXHgxYlsxOzk1bScgIyBVTkdVDQpOID0gJ1x4MWJbMTs5Nm0nICMgQklSVSBNVURBDQpPID0gJ1x4MWJbMG0nICAgICMgV0FSTkEgTUFUSQ0KQk4gPSAnXHgxYlsxOzkwbScgIyBXQVJOQSBBQlUgQUJVDQpBID0gJ1x4MWJbMTsxMDdtJyAjIEJFTEFLQU5HIFBVVElIDQpCQkwgPSAnXHgxYlsxOzEwNm0nICMgQkVMQUtBTkcgQklSVSBMQU5HSVQNCkJQID0gJ1x4MWJbMTsxMDVtJyAjIEJFTEFLQU5HIFBJTksNCkJCID0gJ1x4MWJbMTsxMDRtJyAjIEJFTEFLQU5HIEJJUlUNCkJLID0gJ1x4MWJbMTsxMDNtJyAjIEJFTEFLQU5HIEtVTklORw0KQkggPSAnXHgxYlsxOzEwMm0nICMgQkVMQUtBTkcgSElKQVUNCkJNID0gJ1x4MWJbMTsxMDFtJyAjIEJFTE
